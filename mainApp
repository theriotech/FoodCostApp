import sys
import sqlite3
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem, QHBoxLayout, QComboBox, QFormLayout, QHeaderView, QInputDialog, QFileDialog, QMessageBox, QMainWindow, QAction, QMenu, QMenuBar, QDesktopWidget, QDialog)
from PyQt5.QtCore import (Qt, QLocale)
from io import BytesIO
from PyQt5.QtGui import (QPixmap, QDoubleValidator)
from PyQt5 import (QtGui, QtCore)
import os

def create_tables(conn):
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS produce (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            price REAL NOT NULL,
            unit TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS recipes (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            servings INTEGER NOT NULL,
            total_cost REAL NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS recipe_steps (
        id INTEGER PRIMARY KEY,
        recipe_id INTEGER NOT NULL,
        step_number INTEGER NOT NULL,
        description TEXT NOT NULL,
        FOREIGN KEY (recipe_id) REFERENCES recipes (id) ON DELETE CASCADE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS recipe_step_ingredients (
        id INTEGER PRIMARY KEY,
        recipe_step_id INTEGER NOT NULL,
        produce_id INTEGER NOT NULL,
        quantity REAL NOT NULL,
        FOREIGN KEY (recipe_step_id) REFERENCES recipe_steps (id) ON DELETE CASCADE,
        FOREIGN KEY (produce_id) REFERENCES produce (id) ON DELETE CASCADE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS recipe_ingredients (
            recipe_id INTEGER,
            produce_id INTEGER,
            quantity REAL NOT NULL,
            FOREIGN KEY (recipe_id) REFERENCES recipes (id),
            FOREIGN KEY (produce_id) REFERENCES produce (id)
        )
    ''')
    conn.commit()
def export_database(conn):
    # Get the file path to save the exported database
    file_path, _ = QFileDialog.getSaveFileName(None, "Export Database", "", "Database files (*.db)")

    if not file_path:
        return

    try:
        # Create a new connection to the export file path
        export_conn = sqlite3.connect(file_path)

        # Copy the data from the original connection to the export connection
        with export_conn:
            conn.backup(export_conn)

        QMessageBox.information(None, "Export Successful", f"The database was successfully exported to {file_path}.")
    except Exception as e:
        QMessageBox.critical(None, "Export Error", f"An error occurred while exporting the database: {e}")
def import_database(conn, window):
    # Get the file path of the database file to import
    file_path, _ = QFileDialog.getOpenFileName(None, "Import Database", "", "Database files (*.db)")

    if not file_path:
        return

    try:
        # Read the SQL commands from the import file
        with open(file_path, 'r') as import_file:
            sql_commands = import_file.read()

        # Execute the SQL commands in the current database connection
        cursor = conn.cursor()
        cursor.executescript(sql_commands)
        conn.commit()

        # Reload the produce table
        window.load_produce()

        QMessageBox.information(None, "Import Successful", "The database was successfully imported.")
    except Exception as e:
        QMessageBox.critical(None, "Import Error", f"An error occurred while importing the database: {e}")



        
def add_produce(conn, name, price, unit):
    cursor = conn.cursor()
    cursor.execute("INSERT INTO produce (name, price, unit) VALUES (?, ?, ?)", (name, price, unit))
    conn.commit()

def get_produce(conn):
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM produce")
    return cursor.fetchall()

def add_recipe(self):
    # create a dialog to get recipe details
    dialog = QDialog()
    dialog.setWindowTitle('Add Recipe')

    layout = QFormLayout()

    name_edit = QLineEdit()
    layout.addRow('Name:', name_edit)

    price_edit = QLineEdit()
    layout.addRow('Price (per 100 grams):', price_edit)

    ingredients_edit = QTextEdit()
    layout.addRow('Ingredients:', ingredients_edit)

    button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
    button_box.accepted.connect(dialog.accept)
    button_box.rejected.connect(dialog.reject)
    layout.addRow(button_box)

    dialog.setLayout(layout)

    # show the dialog and wait for user input
    if dialog.exec_() == QDialog.Accepted:
        name = name_edit.text().strip()
        price = price_edit.text().strip()
        ingredients = ingredients_edit.toPlainText().strip()

        # insert the recipe into the database
        cursor = self.conn.cursor()

        # calculate the cost of the recipe based on the cost of its ingredients
        total_cost = 0.0

        # split the ingredients text into individual lines
        ingredient_lines = ingredients.split('\n')

        for ingredient in ingredient_lines:
            # split each line into produce name, quantity, and unit
            produce_name, quantity, unit = ingredient.split(',')

            # look up the cost of the produce in the database
            cursor.execute('SELECT cost FROM produce WHERE name = ?', (produce_name.strip(),))
            produce_cost = cursor.fetchone()[0]

            # calculate the cost of the ingredient based on its quantity and the cost of the produce
            ingredient_cost = float(quantity.strip()) * produce_cost

            # add the cost of the ingredient to the total cost of the recipe
            total_cost += ingredient_cost

        # insert the recipe into the database with its total cost
        cursor.execute('INSERT INTO recipes (name, ingredients, price_per_100g, cost) VALUES (?, ?, ?, ?)', (name, ingredients, price, total_cost))

        # commit the transaction
        self.conn.commit()

        # update the recipe list table
        self.load_recipes()
def get_recipes_with_costs(conn):
    cursor = conn.cursor()
    cursor.execute('''
        SELECT r.name, SUM(p.price * ri.quantity) as cost
        FROM recipes r
        INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id
        INNER JOIN produce p ON p.id = ri.produce_id
        GROUP BY r.id
    ''')
    return cursor.fetchall()
def delete_produce(conn, produce_id):
    cursor = conn.cursor()
    cursor.execute("DELETE FROM produce WHERE id=?", (produce_id,))
    conn.commit()

class FoodCostApp(QMainWindow):
    def __init__(self, conn):
        super().__init__()

        self.conn = conn
        self.recipe_list_form = None
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Restaurant Food Cost Manager')
        
        # Create a toolbar with "File" menu actions
        toolbar = self.addToolBar("File")

        # Create the Export Database action and add it to the toolbar
        export_action = QAction("Export Database", self)
        export_action.triggered.connect(lambda: export_database(self.conn))
        toolbar.addAction(export_action)

        # Create the Import Database action and add it to the toolbar
        import_action = QAction("Import Database", self)
        import_action.triggered.connect(lambda: import_database(self.conn, self))
        toolbar.addAction(import_action)

        # Create a central widget for the main window
        central_widget = QWidget()
        layout = QVBoxLayout(central_widget)
        self.setCentralWidget(central_widget)
        
        logo_pixmap = QPixmap('logo.png')
        logo_label = QLabel()
        logo_label.setPixmap(logo_pixmap.scaled(logo_pixmap.width()//4, logo_pixmap.height()//4, Qt.KeepAspectRatio))
        layout.addWidget(logo_label)
               
        # Produce form
        produce_form_layout = QFormLayout()

        self.name_input = QLineEdit()
        produce_form_layout.addRow('Produce Name:', self.name_input)

        self.price_input = QLineEdit()
        validator = QtGui.QDoubleValidator(self)
        validator.setRange(0.0, 1000000.0, 2)
        validator.setNotation(QtGui.QDoubleValidator.StandardNotation)
        validator.setLocale(QtCore.QLocale(QtCore.QLocale.English))
        self.price_input.setValidator(validator)
        produce_form_layout.addRow('Price:', self.price_input)

        self.unit_input = QLineEdit()
        self.update_text_boxes_width()
        produce_form_layout.addRow('Unit:', self.unit_input)

        self.update_text_boxes_width()

        self.add_produce_button = QPushButton('Add Produce')
        self.add_produce_button.clicked.connect(self.add_produce)
        produce_form_layout.addRow(self.add_produce_button)

        layout.addLayout(produce_form_layout)

        # Produce table
        self.produce_table = QTableWidget()
        self.produce_table.setColumnCount(3)
        self.produce_table.setHorizontalHeaderLabels(['Produce Name', 'Price', 'Unit'])
        layout.addWidget(self.produce_table)
        self.delete_produce_button = QPushButton('Delete Produce')
        self.delete_produce_button.clicked.connect(self.delete_produce)
        produce_form_layout.addRow(self.delete_produce_button)

        # Recipe form
        recipe_form_layout = QFormLayout()

        self.recipe_name_input = QLineEdit()
        recipe_form_layout.addRow('Recipe Name:', self.recipe_name_input)

        self.produce_combobox = QComboBox()
        recipe_form_layout.addRow('Produce:', self.produce_combobox)

        self.quantity_input = QLineEdit()
        recipe_form_layout.addRow('Quantity:', self.quantity_input)

        self.add_ingredient_button = QPushButton('Add Ingredient')
        self.add_ingredient_button.clicked.connect(self.add_ingredient)
        recipe_form_layout.addRow(self.add_ingredient_button)

        self.ingredients_table = QTableWidget()
        self.ingredients_table.setColumnCount(2)
        self.ingredients_table.setHorizontalHeaderLabels(['Produce', 'Quantity'])
        
        self.servings_input = QLineEdit()
        servings_label = QLabel("Servings:")
        servings_layout = QHBoxLayout()
        servings_layout.addWidget(servings_label)
        servings_layout.addWidget(self.servings_input)
        
        recipe_form_layout.addRow(self.ingredients_table)
        
        

        self.save_recipe_button = QPushButton('Save Recipe')
        self.save_recipe_button.clicked.connect(self.save_recipe)
        recipe_form_layout.addRow(self.save_recipe_button)
        
        self.update_price_button = QPushButton('Update Price')
        self.update_price_button.clicked.connect(self.update_price)
        produce_form_layout.addRow(self.update_price_button)
        
        self.delete_ingredient = QPushButton('Remove Ingredient')
        self.delete_ingredient.clicked.connect(self.delete_ingredient_button)
        produce_form_layout.addRow(self.delete_ingredient)
        produce_form.setLayout(produce_form_layout)

        layout.addWidget(produce_form)
        
        self.delete_list_button = QPushButton('Show Recipe List')
        self.show_recipe_list_button.clicked.connect(self.show_recipe_list)
        layout.addWidget(self.show_recipe_list_button)

        layout.addLayout(recipe_form_layout)

        #self.setLayout(layout)
    def resizeEvent(self, event):
        self.update_text_boxes_width()
        super().resizeEvent(event)

    def update_text_boxes_width(self):
        half_width = self.width() // 4
        self.price_input.setFixedWidth(half_width)
        self.unit_input.setFixedWidth(half_width)
        
    def add_produce(self):
        try:
            name = self.name_input.text()
            price = float(self.price_input.text())
            unit = self.unit_input.text()

            add_produce(self.conn, name, price, unit)
            self.load_produce()

            # Clear input fields
            self.name_input.clear()
            self.price_input.clear()
            self.unit_input.clear()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred while adding produce: {e}")

    def load_produce(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT name, price, unit FROM produce")

        self.produce_table.setRowCount(0)
        for row, (name, price, unit) in enumerate(cursor):
            self.produce_table.insertRow(row)
            self.produce_table.setItem(row, 0, QTableWidgetItem(name))
            self.produce_table.setItem(row, 1, QTableWidgetItem("{:,.2f}".format(price)))
            self.produce_table.setItem(row, 2, QTableWidgetItem(unit))

        self.load_produce_combobox()
    def update_price(self):
        row = self.produce_table.currentRow()
        if row != -1:
            produce_name = self.produce_table.item(row, 0).text()
            new_price, ok = QInputDialog.getDouble(self, "Update Price", "Enter new price for the ingredient:", min=0)
            if ok:
                cursor = self.conn.cursor()
                cursor.execute("UPDATE produce SET price=? WHERE name=?", (new_price, produce_name))
                self.conn.commit()
                self.load_produce()
            
    def load_produce_combobox(self):
        produce = get_produce(self.conn)
        self.produce_combobox.clear()

        for _, name in produce:
            self.produce_combobox.addItem(name)

    def add_ingredient(self):
        try:
            produce_name = self.produce_combobox.currentText()
            quantity = float(self.quantity_input.text())

            row = self.ingredients_table.rowCount()
            self.ingredients_table.insertRow(row)
            self.ingredients_table.setItem(row, 0, QTableWidgetItem(produce_name))
            self.ingredients_table.setItem(row, 1, QTableWidgetItem(str(quantity)))

            # Clear input fields
            self.quantity_input.clear()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred while adding ingredient: {e}")

    def delete_ingredient(conn, produce_id):
        try:
            selected_rows = self.recipe_table.selectedItems()
            if not selected_rows:
                return

            row = selected_rows[0].row()
            ingredient_name = self.recipe_table.item(row, 0).text()

            cursor = self.conn.cursor()
            cursor.execute("SELECT id FROM ingredients WHERE name=?", (ingredient_name,))
            ingredient_id = cursor.fetchone()[0]

            delete_ingredient(self.conn, ingredient_id)
            self.load_recipe()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred while removing an ingredient: {e}")
    def save_recipe(self):
        try:
            # Get recipe details from the UI
            recipe_name = self.recipe_name_input.text()
            servings = float(self.servings_input.text())
            instructions = self.instructions_input.toPlainText()
            
            # Insert the recipe into the database
            cursor = self.conn.cursor()
            cursor.execute("INSERT INTO recipes (name, servings, instructions) VALUES (?, ?, ?)",
                           (recipe_name, servings, instructions))
            recipe_id = cursor.lastrowid

            # Get ingredient and sub-recipe details from the UI
            ingredients = []
            subrecipes = []
            for row in range(self.recipe_ingredients_table.rowCount()):
                ingredient_name = self.recipe_ingredients_table.item(row, 0).text()
                quantity = float(self.recipe_ingredients_table.item(row, 1).text())
                unit = self.recipe_ingredients_table.item(row, 2).text()

                # Query the produce_id for the ingredient from the database
                cursor.execute("SELECT id FROM produce WHERE name=?", (ingredient_name,))
                produce_id = cursor.fetchone()[0]

                # Insert the ingredient into the recipe_ingredients table
                cursor.execute("INSERT INTO recipe_ingredients (recipe_id, produce_id, quantity, unit) VALUES (?, ?, ?, ?)",
                               (recipe_id, produce_id, quantity, unit))

            for row in range(self.recipe_subrecipes_table.rowCount()):
                subrecipe_name = self.recipe_subrecipes_table.item(row, 0).text()
                quantity = float(self.recipe_subrecipes_table.item(row, 1).text())
                serving_size_g = float(self.recipe_subrecipes_table.item(row, 2).text())

                # Query the recipe_id for the sub-recipe from the database
                cursor.execute("SELECT id FROM recipes WHERE name=?", (subrecipe_name,))
                subrecipe_id = cursor.fetchone()[0]

                # Insert the sub-recipe into the recipe_subrecipes table
                cursor.execute("INSERT INTO recipe_subrecipes (recipe_id, subrecipe_id, quantity, serving_size_g) VALUES (?, ?, ?, ?)",
                               (recipe_id, subrecipe_id, quantity, serving_size_g))

            self.accept()


        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred while saving recipe: {e}")
    
    def show_recipe_list(self):
        self.recipe_list_form = RecipeListForm(self.conn)
        self.recipe_list_form.load_recipes()
        self.recipe_list_form.show()
        
    def delete_produce(self):
        selected_rows = self.produce_table.selectedItems()
        if not selected_rows:
            return

        row = selected_rows[0].row()
        produce_name = self.produce_table.item(row, 0).text()

        cursor = self.conn.cursor()
        cursor.execute("SELECT id FROM produce WHERE name=?", (produce_name,))
        produce_id = cursor.fetchone()[0]

        delete_produce(self.conn, produce_id)
        self.load_produce()
        
class AddRecipeForm(QDialog):
    def __init__(self, conn):
        super().__init__()

        self.conn = conn
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Add Recipe')

        layout = QVBoxLayout()

        recipe_name_label = QLabel('Recipe Name')
        self.recipe_name_input = QLineEdit()
        layout.addWidget(recipe_name_label)
        layout.addWidget(self.recipe_name_input)

        instructions_label = QLabel('Instructions')
        self.instructions_input = QTextEdit()
        layout.addWidget(instructions_label)
        layout.addWidget(self.instructions_input)

        # Add dropdown box for recipe type
        recipe_type_label = QLabel('Recipe Type')
        self.recipe_type_combobox = QComboBox()
        self.recipe_type_combobox.addItems(['Appetizer', 'Main Course', 'Dessert'])
        layout.addWidget(recipe_type_label)
        layout.addWidget(self.recipe_type_combobox)

        # Create the table for listing ingredients
        self.recipe_ingredients_table = QTableWidget()
        self.recipe_ingredients_table.setColumnCount(3)
        self.recipe_ingredients_table.setHorizontalHeaderLabels(['Produce', 'Quantity', 'Unit'])
        layout.addWidget(self.recipe_ingredients_table)

        add_ingredient_button = QPushButton('Add Ingredient')
        add_ingredient_button.clicked.connect(self.add_ingredient)
        layout.addWidget(add_ingredient_button)

        # Create the table for listing sub-recipes
        self.recipe_subrecipes_table = QTableWidget()
        self.recipe_subrecipes_table.setColumnCount(3)
        self.recipe_subrecipes_table.setHorizontalHeaderLabels(['Recipe', 'Quantity', 'Serving Size (g)'])
        layout.addWidget(self.recipe_subrecipes_table)

        add_subrecipe_button = QPushButton('Add Sub-Recipe')
        add_subrecipe_button.clicked.connect(self.add_subrecipe)
        layout.addWidget(add_subrecipe_button)

        servings_label = QLabel('Servings')
        self.servings_input = QLineEdit()
        layout.addWidget(servings_label)
        layout.addWidget(self.servings_input)

        # Create the buttons for saving and canceling the recipe
        save_button = QPushButton('Save Recipe')
        save_button.clicked.connect(self.save_recipe)
        layout.addWidget(save_button)

        cancel_button = QPushButton('Cancel')
        cancel_button.clicked.connect(self.reject)
        layout.addWidget(cancel_button)

        self.setLayout(layout)

    def add_ingredient(self):
        # Show the dialog for adding an ingredient to the recipe
        dialog = AddIngredientDialog(self.conn)
        if dialog.exec_() == QDialog.Accepted:
            # Add the ingredient to the table
            row = self.recipe_ingredients_table.rowCount()
            self.recipe_ingredients_table.insertRow(row)
            self.recipe_ingredients_table.setItem(row, 0, QTableWidgetItem(dialog.ingredient_name))
            self.recipe_ingredients_table.setItem(row, 1, QTableWidgetItem('{:.2f}'.format(dialog.quantity)))
            self.recipe_ingredients_table.setItem(row, 2, QTableWidgetItem(dialog.unit))

    def add_subrecipe(self):
        # Show the dialog for adding a sub-recipe to the recipe
        dialog = AddSubrecipeDialog(self.conn)
        if dialog.exec_() == QDialog.Accepted:
            # Add the sub-recipe to the table
            row = self.recipe_subrecipes_table.rowCount()
            self.recipe_subrecipes_table.insertRow(row)
            self.recipe_subrecipes_table.setItem(row, 0, QTableWidgetItem(dialog.recipe_name))
            self.recipe_subrecipes_table.setItem(row, 1, QTableWidgetItem('{:.2f}'.format(dialog.quantity)))
            self.recipe_subrecipes_table.setItem(row, 2, QTableWidgetItem('{:.2f}'.format(dialog.serving_size_g)))

    def save_recipe(self):
        try:
            # Get recipe details from the UI
            recipe_name = self.recipe_name_input.text()
            servings = float(self.servings_input.text())
            instructions = self.instructions_input.toPlainText()
            # Get ingredient details from the UI
            ingredients = []
            for row in range(self.recipe_ingredients_table.rowCount()):
                ingredient_name = self.recipe_ingredients_table.item(row, 0).text()
                quantity = float(self.recipe_ingredients_table.item(row, 1).text())
                unit = self.recipe_ingredients_table.item(row, 2).text()

                # Query the current price of the ingredient from the database
                cursor = self.conn.cursor()
                cursor.execute('SELECT price FROM produce WHERE name = ?', (ingredient_name,))
                result = cursor.fetchone()
                if result is None:
                    # Handle case where ingredient is not found in the database
                    error_dialog = QMessageBox()
                    error_dialog.setWindowTitle('Error')
                    error_dialog.setText('Ingredient "{}" not found in the database'.format(ingredient_name))
                    error_dialog.exec_()
                    return
                else:
                    price_per_unit = result[0]

                # Calculate the total cost for the ingredient based on the current price in the database
                total_cost = price_per_unit * quantity

                # Add the ingredient details to the list of ingredients
                ingredients.append((ingredient_name, quantity, unit, total_cost))
                
        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred while saving recipe: {e}")
    
class RecipeListForm(QWidget):
    def __init__(self, conn):
        super().__init__()

        self.conn = conn
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Recipe List')

        layout = QVBoxLayout()

        self.recipe_list_table = QTableWidget()
        self.recipe_list_table.setColumnCount(2)
        self.recipe_list_table.setHorizontalHeaderLabels(['Recipe Name', 'Cost'])
        layout.addWidget(self.recipe_list_table)
        self.delete_recipe_button = QPushButton('Delete Recipe')
        self.delete_recipe_button.clicked.connect(self.delete_recipe)
        layout.addWidget(self.delete_recipe_button)
        self.close_button = QPushButton('Close')
        self.close_button.clicked.connect(self.close)
        layout.addWidget(self.close_button)

        self.setLayout(layout)

        # Connect double-click signal to show ingredients
        self.recipe_list_table.cellDoubleClicked.connect(self.show_ingredients)

        
    def sort_recipes(self, column):
        self.recipe_list_table.sortItems(column)
        
    def load_recipes(self):
        recipes_with_costs = get_recipes_with_costs(self.conn)

        self.recipe_list_table.setRowCount(0)
        for row, (recipe_name, cost) in enumerate(sorted(recipes_with_costs, key=lambda x: x[0])):
            self.recipe_list_table.insertRow(row)
            self.recipe_list_table.setItem(row, 0, QTableWidgetItem(recipe_name))
            self.recipe_list_table.setItem(row, 1, QTableWidgetItem('{:.2f}'.format(cost)))
    def show_ingredients(self, row, column):
        recipe_name = self.recipe_list_table.item(row, 0).text()

        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT p.name, ri.quantity, p.unit
            FROM recipes r
            INNER JOIN recipe_ingredients ri ON r.id = ri.recipe_id
            INNER JOIN produce p ON p.id = ri.produce_id
            WHERE r.name = ?
        ''', (recipe_name,))
        ingredients = cursor.fetchall()

        dialog = QDialog()
        dialog.setWindowTitle('Ingredients for {}'.format(recipe_name))

        table = QTableWidget()
        table.resizeColumnsToContents()
        table.setColumnCount(3)
        table.setHorizontalHeaderLabels(['Produce', 'Quantity', 'Unit'])
        table.setRowCount(len(ingredients))

        for row, (name, quantity, unit) in enumerate(ingredients):
            table.setItem(row, 0, QTableWidgetItem(name))
            table.setItem(row, 1, QTableWidgetItem(str(quantity)))
            table.setItem(row, 2, QTableWidgetItem(unit))

        layout = QVBoxLayout()
        layout.addWidget(table)
        dialog.setLayout(layout)

        # Set the dialog size based on the table size
        table_width = table.horizontalHeader().length() + table.verticalHeader().width()
        table_height = table.verticalHeader().length() + table.horizontalHeader().height() + table.height()
        dialog.resize(table_width, table_height)
        
        dialog.exec_()
    def delete_recipe(self):
        row = self.recipe_list_table.currentRow()
        if row != -1:
            recipe_name = self.recipe_list_table.item(row, 0).text()
            cursor = self.conn.cursor()
            cursor.execute("DELETE FROM recipes WHERE name=?", (recipe_name,))
            self.conn.commit()
            self.load_recipes()

   
def main():
    conn = sqlite3.connect("restaurant_food_cost.db")
    create_tables(conn)

    app = QApplication(sys.argv)

    window = FoodCostApp(conn)
    window.load_produce()
    window.show()

    sys.exit(app.exec_())

if __name__ == "__main__":
    app = QApplication([])
    conn = sqlite3.connect("food_cost_app.db")
    create_tables(conn)
    mainWin = FoodCostApp(conn)
    mainWin.load_produce()
    mainWin.show()
    sys.exit(app.exec_())
